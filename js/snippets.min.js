var $jscomp = { scope: {} };
$jscomp.defineProperty =
  "function" == typeof Object.defineProperties
    ? Object.defineProperty
    : function (a, b, c) {
        if (c.get || c.set)
          throw new TypeError("ES3 does not support getters and setters.");
        a != Array.prototype && a != Object.prototype && (a[b] = c.value);
      };
$jscomp.getGlobal = function (a) {
  return "undefined" != typeof window && window === a
    ? a
    : "undefined" != typeof global && null != global
    ? global
    : a;
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.SYMBOL_PREFIX = "jscomp_symbol_";
$jscomp.initSymbol = function () {
  $jscomp.initSymbol = function () {};
  $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol);
};
$jscomp.symbolCounter_ = 0;
$jscomp.Symbol = function (a) {
  return $jscomp.SYMBOL_PREFIX + (a || "") + $jscomp.symbolCounter_++;
};
$jscomp.initSymbolIterator = function () {
  $jscomp.initSymbol();
  var a = $jscomp.global.Symbol.iterator;
  a || (a = $jscomp.global.Symbol.iterator = $jscomp.global.Symbol("iterator"));
  "function" != typeof Array.prototype[a] &&
    $jscomp.defineProperty(Array.prototype, a, {
      configurable: !0,
      writable: !0,
      value: function () {
        return $jscomp.arrayIterator(this);
      },
    });
  $jscomp.initSymbolIterator = function () {};
};
$jscomp.arrayIterator = function (a) {
  var b = 0;
  return $jscomp.iteratorPrototype(function () {
    return b < a.length ? { done: !1, value: a[b++] } : { done: !0 };
  });
};
$jscomp.iteratorPrototype = function (a) {
  $jscomp.initSymbolIterator();
  a = { next: a };
  a[$jscomp.global.Symbol.iterator] = function () {
    return this;
  };
  return a;
};
$jscomp.makeIterator = function (a) {
  $jscomp.initSymbolIterator();
  var b = a[Symbol.iterator];
  return b ? b.call(a) : $jscomp.arrayIterator(a);
};
$jscomp.arrayFromIterator = function (a) {
  for (var b, c = []; !(b = a.next()).done; ) c.push(b.value);
  return c;
};
$jscomp.arrayFromIterable = function (a) {
  return a instanceof Array
    ? a
    : $jscomp.arrayFromIterator($jscomp.makeIterator(a));
};
$jscomp.owns = function (a, b) {
  return Object.prototype.hasOwnProperty.call(a, b);
};
$jscomp.polyfill = function (a, b, c, d) {
  if (b) {
    c = $jscomp.global;
    a = a.split(".");
    for (d = 0; d < a.length - 1; d++) {
      var f = a[d];
      f in c || (c[f] = {});
      c = c[f];
    }
    a = a[a.length - 1];
    d = c[a];
    b = b(d);
    b != d &&
      null != b &&
      $jscomp.defineProperty(c, a, {
        configurable: !0,
        writable: !0,
        value: b,
      });
  }
};
$jscomp.polyfill(
  "WeakMap",
  function (a) {
    function b(a) {
      $jscomp.owns(a, d) || $jscomp.defineProperty(a, d, { value: {} });
    }
    function c(a) {
      var c = Object[a];
      c &&
        (Object[a] = function (a) {
          b(a);
          return c(a);
        });
    }
    if (
      (function () {
        if (!a || !Object.seal) return !1;
        try {
          var c = Object.seal({}),
            b = Object.seal({}),
            d = new a([
              [c, 2],
              [b, 3],
            ]);
          if (2 != d.get(c) || 3 != d.get(b)) return !1;
          d["delete"](c);
          d.set(b, 4);
          return !d.has(c) && 4 == d.get(b);
        } catch (l) {
          return !1;
        }
      })()
    )
      return a;
    var d = "$jscomp_hidden_" + Math.random().toString().substring(2);
    c("freeze");
    c("preventExtensions");
    c("seal");
    var f = 0,
      e = function (a) {
        this.id_ = (f += Math.random() + 1).toString();
        if (a) {
          $jscomp.initSymbol();
          $jscomp.initSymbolIterator();
          a = $jscomp.makeIterator(a);
          for (var c; !(c = a.next()).done; )
            (c = c.value), this.set(c[0], c[1]);
        }
      };
    e.prototype.set = function (a, c) {
      b(a);
      if (!$jscomp.owns(a, d)) throw Error("WeakMap key fail: " + a);
      a[d][this.id_] = c;
      return this;
    };
    e.prototype.get = function (a) {
      return $jscomp.owns(a, d) ? a[d][this.id_] : void 0;
    };
    e.prototype.has = function (a) {
      return $jscomp.owns(a, d) && $jscomp.owns(a[d], this.id_);
    };
    e.prototype["delete"] = function (a) {
      return $jscomp.owns(a, d) && $jscomp.owns(a[d], this.id_)
        ? delete a[d][this.id_]
        : !1;
    };
    return e;
  },
  "es6-impl",
  "es3"
);
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.polyfill(
  "Map",
  function (a) {
    if (
      !$jscomp.ASSUME_NO_NATIVE_MAP &&
      (function () {
        if (!a || !a.prototype.entries || "function" != typeof Object.seal)
          return !1;
        try {
          var c = Object.seal({ x: 4 }),
            b = new a($jscomp.makeIterator([[c, "s"]]));
          if (
            "s" != b.get(c) ||
            1 != b.size ||
            b.get({ x: 4 }) ||
            b.set({ x: 4 }, "t") != b ||
            2 != b.size
          )
            return !1;
          var d = b.entries(),
            e = d.next();
          if (e.done || e.value[0] != c || "s" != e.value[1]) return !1;
          e = d.next();
          return e.done ||
            4 != e.value[0].x ||
            "t" != e.value[1] ||
            !d.next().done
            ? !1
            : !0;
        } catch (m) {
          return !1;
        }
      })()
    )
      return a;
    $jscomp.initSymbol();
    $jscomp.initSymbolIterator();
    var b = new WeakMap(),
      c = function (a) {
        this.data_ = {};
        this.head_ = e();
        this.size = 0;
        if (a) {
          a = $jscomp.makeIterator(a);
          for (var c; !(c = a.next()).done; )
            (c = c.value), this.set(c[0], c[1]);
        }
      };
    c.prototype.set = function (a, c) {
      var b = d(this, a);
      b.list || (b.list = this.data_[b.id] = []);
      b.entry
        ? (b.entry.value = c)
        : ((b.entry = {
            next: this.head_,
            previous: this.head_.previous,
            head: this.head_,
            key: a,
            value: c,
          }),
          b.list.push(b.entry),
          (this.head_.previous.next = b.entry),
          (this.head_.previous = b.entry),
          this.size++);
      return this;
    };
    c.prototype["delete"] = function (a) {
      a = d(this, a);
      return a.entry && a.list
        ? (a.list.splice(a.index, 1),
          a.list.length || delete this.data_[a.id],
          (a.entry.previous.next = a.entry.next),
          (a.entry.next.previous = a.entry.previous),
          (a.entry.head = null),
          this.size--,
          !0)
        : !1;
    };
    c.prototype.clear = function () {
      this.data_ = {};
      this.head_ = this.head_.previous = e();
      this.size = 0;
    };
    c.prototype.has = function (a) {
      return !!d(this, a).entry;
    };
    c.prototype.get = function (a) {
      return (a = d(this, a).entry) && a.value;
    };
    c.prototype.entries = function () {
      return f(this, function (a) {
        return [a.key, a.value];
      });
    };
    c.prototype.keys = function () {
      return f(this, function (a) {
        return a.key;
      });
    };
    c.prototype.values = function () {
      return f(this, function (a) {
        return a.value;
      });
    };
    c.prototype.forEach = function (a, c) {
      for (var b = this.entries(), d; !(d = b.next()).done; )
        (d = d.value), a.call(c, d[1], d[0], this);
    };
    c.prototype[Symbol.iterator] = c.prototype.entries;
    var d = function (a, c) {
        var d;
        d = c && typeof c;
        "object" == d || "function" == d
          ? b.has(c)
            ? (d = b.get(c))
            : ((d = "" + ++g), b.set(c, d))
          : (d = "p_" + c);
        var e = a.data_[d];
        if (e && $jscomp.owns(a.data_, d))
          for (var f = 0; f < e.length; f++) {
            var h = e[f];
            if ((c !== c && h.key !== h.key) || c === h.key)
              return { id: d, list: e, index: f, entry: h };
          }
        return { id: d, list: e, index: -1, entry: void 0 };
      },
      f = function (a, c) {
        var b = a.head_;
        return $jscomp.iteratorPrototype(function () {
          if (b) {
            for (; b.head != a.head_; ) b = b.previous;
            for (; b.next != b.head; )
              return (b = b.next), { done: !1, value: c(b) };
            b = null;
          }
          return { done: !0, value: void 0 };
        });
      },
      e = function () {
        var a = {};
        return (a.previous = a.next = a.head = a);
      },
      g = 0;
    return c;
  },
  "es6-impl",
  "es3"
);
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.polyfill(
  "Set",
  function (a) {
    if (
      !$jscomp.ASSUME_NO_NATIVE_SET &&
      (function () {
        if (!a || !a.prototype.entries || "function" != typeof Object.seal)
          return !1;
        try {
          var c = Object.seal({ x: 4 }),
            b = new a($jscomp.makeIterator([c]));
          if (
            !b.has(c) ||
            1 != b.size ||
            b.add(c) != b ||
            1 != b.size ||
            b.add({ x: 4 }) != b ||
            2 != b.size
          )
            return !1;
          var f = b.entries(),
            e = f.next();
          if (e.done || e.value[0] != c || e.value[1] != c) return !1;
          e = f.next();
          return e.done ||
            e.value[0] == c ||
            4 != e.value[0].x ||
            e.value[1] != e.value[0]
            ? !1
            : f.next().done;
        } catch (g) {
          return !1;
        }
      })()
    )
      return a;
    $jscomp.initSymbol();
    $jscomp.initSymbolIterator();
    var b = function (a) {
      this.map_ = new Map();
      if (a) {
        a = $jscomp.makeIterator(a);
        for (var c; !(c = a.next()).done; ) this.add(c.value);
      }
      this.size = this.map_.size;
    };
    b.prototype.add = function (a) {
      this.map_.set(a, a);
      this.size = this.map_.size;
      return this;
    };
    b.prototype["delete"] = function (a) {
      a = this.map_["delete"](a);
      this.size = this.map_.size;
      return a;
    };
    b.prototype.clear = function () {
      this.map_.clear();
      this.size = 0;
    };
    b.prototype.has = function (a) {
      return this.map_.has(a);
    };
    b.prototype.entries = function () {
      return this.map_.entries();
    };
    b.prototype.values = function () {
      return this.map_.values();
    };
    b.prototype[Symbol.iterator] = b.prototype.values;
    b.prototype.forEach = function (a, b) {
      var c = this;
      this.map_.forEach(function (d) {
        return a.call(b, d, d, c);
      });
    };
    return b;
  },
  "es6-impl",
  "es3"
);
var Snippet = function (a, b, c, d, f, e) {
    this.id = a;
    this.groupName = b;
    this.title = c;
    this.description = d;
    this.snippet = f;
    this.notes = e;
  },
  snippetsStr = "snippets",
  indexStr = "index",
  index = getIndex(),
  snippets = getSnippets();
function getIndex() {
  var a = 0;
  settings.rememberIndex && (a = localStorage.getItem(indexStr) || 0);
  return a;
}
function getSnippets() {
  var a = [];
  null != localStorage.getItem(snippetsStr) &&
    (a = JSON.parse(localStorage.getItem(snippetsStr)));
  return a;
}
function getGroupNames() {
  var a = [];
  snippets.forEach(function (b) {
    a.push(b.groupName);
  });
  a.sort();
  return [].concat($jscomp.arrayFromIterable(new Set(a)));
}
function sortByTitle(a, b) {
  return a.title < b.title ? -1 : a.title > b.title ? 1 : 0;
}
function getSnippetsByGroupName(a) {
  var b = [];
  snippets.forEach(function (c) {
    c.groupName == a && b.push(c);
  });
  b.sort(sortByTitle);
  return b;
}
function getSnippetByID(a) {
  for (var b, c = 0; c < snippets.length; c++)
    if (snippets[c].id == a) {
      b = snippet[c];
      break;
    }
  return b;
}
function getIndexByID(a) {
  for (var b = 0, c = 0; c < snippets.length; c++)
    if (snippets[c].id == a) {
      b = c;
      break;
    }
  return b;
}
function nextSnippetID() {
  var a = 1;
  snippets.forEach(function (b) {
    b.id >= a && (a = b.id + 1);
  });
  return a;
}
function snippetToModal(a, b) {
  var c = document.getElementById("btn-snippet-modal-action"),
    d = document.getElementById("snippet-modal-header"),
    f = document.getElementById("lbl-title"),
    e = document.getElementById("lbl-group"),
    g = document.getElementById("lbl-description"),
    h = document.getElementById("lbl-snippet"),
    k = document.getElementById("lbl-notes");
  if ("add" == b)
    (c.dataset.id = 0),
      (c.dataset.type = "add"),
      (d.innerHTML = "Add Snippet"),
      (f.value = ""),
      (e.value = ""),
      (g.value = ""),
      (h.value = ""),
      (k.value = "");
  else {
    if (null == a)
      return (
        showMsg(
          "warning",
          "<p>No snippet to edit!</p><p>Did you mean add?</p>"
        ),
        !1
      );
    c.dataset.id = a.id;
    c.dataset.type = "edit";
    d.innerHTML = "Edit Snippet";
    f.value = a.title;
    e.value = a.groupName;
    g.value = a.description;
    h.value = a.snippet;
    k.value = a.notes;
  }
  showModal("add-snippet-modal");
}
function snippetToScreen() {
  var a = document.getElementById("main-title"),
    b = document.getElementById("main-group-name"),
    c = document.getElementById("main-description"),
    d = document.getElementById("main-snippet"),
    f = document.getElementById("main-notes");
  0 < snippets.length
    ? ((a.innerHTML = snippets[index].title),
      (b.innerHTML = "&lt" + snippets[index].groupName + "&gt"),
      (c.innerHTML = snippets[index].description),
      (d.innerHTML = snippets[index].snippet),
      (f.innerHTML = snippets[index].notes))
    : ((a.innerHTML = "---"),
      (b.innerHTML = "---"),
      (c.innerHTML = "---"),
      (d.innerHTML = "---"),
      (f.innerHTML = "---"));
}
function snippetsToNavBar() {
  var a = document.getElementById("side-nav-container");
  if (a) {
    a.innerHTML = "";
    for (var b, c, d, f = getGroupNames(snippets), e = 0; e < f.length; e++) {
      b = document.createElement("button");
      b.classList.add(
        "accordion",
        "accordion-header",
        "font-branded",
        "font-lg",
        "bg-clr-dark",
        "font-clr-light"
      );
      b.innerHTML = f[e];
      a.appendChild(b);
      c = document.createElement("div");
      c.classList.add("panel", "font-branded", "font-clr-light", "bg-clr-dark");
      s = getSnippetsByGroupName(f[e]);
      for (var g = 0; g < s.length; g++)
        (d = document.createElement("p")),
          (b = document.createElement("button")),
          b.classList.add(
            "accordion",
            "accordion-item",
            "font-branded",
            "font-sm",
            "bg-clr-dark",
            "font-clr-light"
          ),
          (b.innerHTML = s[g].title),
          (b.dataset.id = s[g].id),
          d.appendChild(b),
          c.appendChild(d);
      a.appendChild(c);
    }
    setAccordionEvents();
    setAccordionItemEvents();
  }
}
function snippetsToScreen() {
  document.getElementById("lbl-snippets").value = JSON.stringify(
    snippets,
    null,
    2
  );
  snippetsToNavBar();
  snippetToScreen();
}
function saveIndex() {
  localStorage.setItem(indexStr, JSON.stringify(index));
}
function saveSnippets(a) {
  localStorage.setItem(snippetsStr, JSON.stringify(snippets));
  snippetsToScreen();
  snippetToScreen();
  a && showMsg("success", "<p>Snippets saved</p>");
}
function clearSnippets() {
  localStorage.removeItem(indexStr);
  index = getIndex();
  saveIndex();
  localStorage.removeItem(snippetsStr);
  snippets = getSnippets();
  saveSnippets(!1);
}
function exportSnippets() {
  exportObj(snippets, "Snips-Snippets.bak");
  showMsg("success", "<p>Snippets exported to downloads folder</p>");
}
function onloadImportSnippets(a) {
  snippets = JSON.parse(a) || "[]";
  saveSnippets(!0);
}
function importSnippets(a) {
  importObj(a, onloadImportSnippets, !1);
}
function saveSnippetsFromText() {
  var a = document.getElementById("lbl-snippets").value;
  onloadImportSnippets(a);
}
function addEditSnippet() {
  var a = document.getElementById("btn-snippet-modal-action"),
    b = document.getElementsByClassName("snippet-control"),
    c;
  for (c = 0; c < b.length; c++)
    if (b[c].required && "" == b[c].value)
      return (
        showMsg("error", "<p>Missing required field: " + b[c].name + "</p>"), !1
      );
  b = document.getElementById("lbl-title");
  c = document.getElementById("lbl-group");
  var d = document.getElementById("lbl-description"),
    f = document.getElementById("lbl-snippet"),
    e = document.getElementById("lbl-notes");
  "add" == a.dataset.type
    ? ((snippet = new Snippet(
        nextSnippetID(),
        c.value,
        b.value,
        d.value,
        f.value,
        e.value
      )),
      snippets.push(snippet))
    : ((snippets[index].title = b.value),
      (snippets[index].groupName = c.value),
      (snippets[index].description = d.value),
      (snippets[index].snippet = f.value),
      (snippets[index].notes = e.value));
  saveSnippets(!0);
  hideModal("add-snippet-modal");
}
